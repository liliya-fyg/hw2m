# data = ("O!", "0705","Megacom" , "0550", "Beeline",  "0770", "Katel", "0510", "Fonex", "0543")
# designations = data[0::2]
# codes = data[1::2]
#
# operator = {}
#
# operator = dict(zip(designations, [{c} for  c in codes]))
#
# for bad in ["Fonex", "Katel"]:
#     operator.pop(bad, None)
#
# operator["O!"].update({"0700", "0500"})
# operator["Megacom"].update({"0999", "0555"})
# operator["Beeline"].update({"0222", "0777"})
#
# for name, codes in operator.items():
#     print(f"{name} - {codes}")


#cod nomer 2

# data = ("O!", "0705","Megacom" , "0550", "Beeline",  "0770", "Katel", "0510", "Fonex", "0543")
#
# designation = []
# codes = []
#
# i = 0
# while i < len(data):
#     designation.append(data[i])
#     codes.append(data[i+1])
#     i += 2
#
# operators = {}
# j = 0
# while j < len(designation):
#     operators[designation[j]] = {codes[j]}
#     j += 1
#
# for bad in ["Fonex", "Katel"]:
#     operators.pop(bad, None)
#
# operators["O!"].update({"0700", "0500"})
# operators["Megacom"].update({"0999", "0555"})
# operators["Beeline"].update({"0222", "0777"})
#
# for name, codes in operators.items():
#     print(f"{name} - {codes}")


# cod nomer 3

# data = ("O!", "Megacom", "0705", "Beeline", "0550", "0770", "Katel", "0510", "Fonex", "0543")
#
# designation = []
# codes = []
#
# i = 0
# while i < len(data):
#     designation.append(data[i])     # –Ω–∞–∑–≤–∞–Ω–∏–µ
#     codes.append(data[i+1])         # –∫–æ–¥
#     i += 2
#
# # —Å–æ–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
# operators = {}
# j = 0
# while j < len(designation):
#     operators[designation[j]] = {codes[j]}
#     j += 1
#
# # —É–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã—Ö
# for bad in ["Fonex", "Katel"]:
#     operators.pop(bad, None)
#
# # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥—ã
# operators["O!"].update({"0700", "0500"})
# operators["Megacom"].update({"0999", "0555"})
# operators["Beeline"].update({"0222", "0777"})
#
# # –≤—ã–≤–æ–¥
# for name, codes in operators.items():
#     print(f"{name} - {codes}")

# cod nomer 4


# data = ("O!", "Megacom", "0705", "Beeline", "0550", "0770", "Katel", "0510", "Fonex", "0543")
#
# designations = []
# codes = []
# i = 0
# while i < len(data):
#     item = data[i]
#     try:
#         int(item);
#         codes.appendet(item)
#     except ValueError:
#         designations.append(item)
#     # if item.isdigit():
#     #     codes.append(item)
#     # else:
#     #     designations.append(item)
#     # i += 1
#
# operators = {}
# j = 0
# while j < len(designations):
#     operators[designations[j]] = {codes[j]}
#     j += 1
#
# for bad in ("Fonex", "Katel"):
#     operators.pop(bad, None)
#
# operators["O!"].update({"0700", "0500"})
# operators["Megacom"].update({"0999", "0555"})
# operators["Beeline"].update({"0222", "0777"})
#
# for name, nums in operators.items():
#     print(f"{name} - {nums}")


# cod nomer 5


# data = ("O!", "Megacom", "0705", "Beeline", "0550", "0770", "Katel", "0510", "Fonex", "0543")
# designations = data[0::2]
# codes = data[1::2]
# i = 0
# while i < len(data):
#     item = data[i]
#
# operators = dict(zip(designations, [{c} for c in codes]))
#
# try:
#     int(item); codes.appendet(item)
# except ValueError:
#     designations.append(item)
#
# for bad in ("Fonex", "Katel"):
#     operators.pop(bad, None)
#
# operators["O!"].update({"0700", "0500"})
# operators["Megacom"].update({"0999", "0555"})
# operators["Beeline"].update({"0222", "0777"})
#
# for name, nums in operators.items():
#     print(f"{name} - {nums}")

# cod nomer 6


# data = ("O!", "Megacom", "0705", "Beeline", "0550", "0770", "Katel", "0510", "Fonex", "0543")
#
# designations = []
# codes = []
#
# i = 0
# while i < len(data):
#     designations.append(data[i])     # –Ω–∞–∑–≤–∞–Ω–∏–µ
#     codes.append(data[i+1])          # –∫–æ–¥
#     i += 2
#
# # —Å–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å
# operators = {}
# j = 0
# while j < len(designations):
#     operators[designations[j]] = {codes[j]}
#     j += 1
#
# # —É–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ
# for bad in ("Fonex", "Katel"):
#     operators.pop(bad, None)
#
# # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥—ã
# operators["O!"].update({"0700", "0500"})
# operators["Megacom"].update({"0999", "0555"})
# operators["Beeline"].update({"0222", "0777"})
#
# # –≤—ã–≤–æ–¥
# for name, nums in operators.items():
#     print(f"{name} - {nums}")


# ==========================
# –ó–∞–¥–∞–Ω–∏–µ 1. –ë–ª–∏–∂–∞–π—à–µ–µ —á–∏—Å–ª–æ
# ==========================

# def nearest_number(numbers, target):
#     # —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ —Ä–∞–∑–Ω–∏—Ü–µ (–º–æ–¥—É–ª—å —Ä–∞–∑–Ω–æ—Å—Ç–∏)
#     sorted_numbers = sorted(numbers, key=lambda x: abs(x - target))
#     return (target, sorted_numbers)
#
#
# # ===========================================
# # –ó–∞–¥–∞–Ω–∏–µ 2. Lambda + map –∏ filter (–ø—Ä–∏–º–µ—Ä—ã)
# # ===========================================
#
# def lambda_examples():
#     # map: —É–º–Ω–æ–∂–∞–µ–º –∫–∞–∂–¥–æ–µ —á–∏—Å–ª–æ –Ω–∞ 2
#     numbers = [1, 2, 3, 4, 5]
#     doubled = list(map(lambda x: x * 2, numbers))
#     print("map (x2):", doubled)  # [2, 4, 6, 8, 10]
#
#     # filter: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —á—ë—Ç–Ω—ã–µ —á–∏—Å–ª–∞
#     evens = list(filter(lambda x: x % 2 == 0, numbers))
#     print("filter (—á—ë—Ç–Ω—ã–µ):", evens)  # [2, 4]
#
#
# # ==========================================================
# # –ó–∞–¥–∞–Ω–∏–µ 3. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É (—Ü–∏–∫–ª–æ–º)
# # ==========================================================
#
# def get_element(iterable=[1, 2, 3, 4, 5]):
#     while True:
#         index = input(f"–í–≤–µ–¥–∏—Ç–µ –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ")
#
#         if index.lower() == "exit":
#             print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
#             break
#
#         try:
#             index = int(index)  # –ø—Ä–æ–±—É–µ–º –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤–≤–æ–¥ –≤ —á–∏—Å–ª–æ
#             print(f"–≠–ª–µ–º–µ–Ω—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É {index}: {iterable[index]}")
#         except ValueError:
#             print("–û—à–∏–±–∫–∞: –∏–Ω–¥–µ–∫—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
#         except IndexError:
#             print(f"–û—à–∏–±–∫–∞: –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã –æ—Ç 0 –¥–æ {len(iterable)-1}")


# =====================
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ–≥—Ä–∞–º–º—ã
# =====================
#
# def main():
#     while True:
#         print("\n–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞–Ω–∏–µ:")
#         print("1 - –ë–ª–∏–∂–∞–π—à–µ–µ —á–∏—Å–ª–æ")
#         print("2 - –ü—Ä–∏–º–µ—Ä—ã lambda (map, filter)")
#         print("3 - –í—ã–≤–æ–¥ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É")
#         print("0 - –í—ã—Ö–æ–¥")
#
#         choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ")
#
#         if choice == "1":
#             print("\n–ó–∞–¥–∞–Ω–∏–µ 1:")
#             print(nearest_number([312, 996, 31, 1991], 1000))
#             print(nearest_number([5, 20, 18, 103, 4], 27))
#
#         elif choice == "2":
#             print("\n–ó–∞–¥–∞–Ω–∏–µ 2:")
#             lambda_examples()
#
#         elif choice == "3":
#             print("\n–ó–∞–¥–∞–Ω–∏–µ 3:")
#             get_element()
#
#         elif choice == "0":
#             print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
#             break
#         else:
#             print("–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏ 0, 1, 2 –∏–ª–∏ 3.")
#
# if __name__ == "__main__":
#     main()

# if name == "main":
#     main()

# def get_element(iterable=[1, 2, 3, 4, 5]):
#     while True:
#         index = input(f"–í–≤–µ–¥–∏—Ç–µ –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ")
#
#         if index.lower() == "exit":
#             print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
#             break
#
#         try:
#             index = int(index)  # –ø—Ä–æ–±—É–µ–º –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤–≤–æ–¥ –≤ —á–∏—Å–ª–æ
#             print(f"–≠–ª–µ–º–µ–Ω—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É {index}: {iterable[index]}")
#         except ValueError:
#             print("–û—à–∏–±–∫–∞: –∏–Ω–¥–µ–∫—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
#         except IndexError:
#             print(f"–û—à–∏–±–∫–∞: –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã –æ—Ç 0 –¥–æ {len(iterable)-1}")
#

# üîπ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
# get_elem

#
# geeks_founding_year = 2018
# current_year = int(input('enter current year: '))
# if (current_year - geeks_founding_year) > 5:
#     print('–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º—É —Ü–µ–Ω—Ç—Ä—É –±–æ–ª—å—à–µ 5 –ª–µ—Ç')
# else:
#     pass
# elif (current_year - geeks_founding_year) in range(1, 5 + 1):
#     print('–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ
#     –ª—å–Ω–æ–º—É —Ü–µ–Ω—Ç—Ä—É –º–µ–Ω—å—à–µ 5 –ª–µ—Ç')

# for i in range(1, 10+1):
#     if i > 7:
#         print(i)
#     else:
#         print(False)

# kgz_regions = [
#     "–ß—É–π", "–´—Å—Å—ã–∫-–∫—É–ª—å", "–ù–∞—Ä—ã–Ω", "–¢–∞–ª–∞—Å",
#     "–î–∂–∞–ª–∞–ª-–ê–±–∞–¥", "–û—à", "–ë–∞—Ç–∫–µ–Ω",
# ]
#
# first_tree = tuple(kgz_regions[:3])
# print(first_tree)

#
# geeks_in = ['–ë–∏—à–∫–µ–∫', '–û—à', '–ö–∞—Ä–∞-–ë–∞–ª—Ç–∞', '–ë–∏—à–∫–µ–∫ 9–º–∫—Ä']
#
# geeks_in.sort()
# geeks_in = [i.upper() for i in geeks_in]
# geeks_in = geeks_in[::-1]
# print(geeks_in)

geektech = {
       'name': 'Geektech',
       'address': '–¢–æ–∫—Ç–æ–≥—É–ª–∞ 175',
       'courses': {'Backend', 'Android'}
}

geeks = dict(name='GEEKS', address='–ò6—Ä–∞–∏–º–æ–≤–∞ 103')
geektech.update(geeks)
geeks = geektech.copy()
geeks['courses'].update(['Frontend', 'iOS'])
print (geeks)